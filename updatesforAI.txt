# VeeFriends Card Game - Issue Analysis and Solutions

## Issues Identified

1. **Newline Characters in Deck Data**: The MongoDB validation is failing with "Cast to [string] failed" error when trying to process deck data. This appears to be happening because deck data is being saved as a string with newline characters (`\n`) rather than a proper array of card objects.

2. **Different Game Logic in Multiplayer vs Single Player**: The multiplayer implementation has a different card game with mechanics (3 energy and a hand of cards) that differ from the single player game. The user wants to standardize on the single player game logic.

## Root Causes

1. **MongoDB Schema Issue**: In the `VeefriendsGame.js` model, the players' deck is defined as an array of card objects, but the data being stored appears to be stringified JSON with newline characters.

2. **Multiple Game Implementations**: The codebase has multiple card game implementations:
   - The original energy-based card game (in `cardUtils.js` - functions like `createCardTemplate`, `getStarterDeck`)
   - The VeeFriends card game with skill/stamina/aura attributes (in `cardUtils.js` - functions like `createVeefriendsCard`, `generateRandomDeck`)

## Proposed Solutions

### 1. Fix the Newline Character Issue in MongoDB Data

1. **Fix the Deck Setter in VeefriendsGame.js Model**:
   ```javascript
   deck: {
     type: [{
       id: String,
       name: String,
       skill: Number,
       stamina: Number,
       aura: Number,
       baseTotal: Number,
       finalTotal: Number,
       rarity: String,
       character: String,
       type: String,
       unlocked: Boolean
     }],
     default: [],
     set: function(cards) {
       // If the cards are passed as a stringified array, parse it
       if (typeof cards === 'string') {
         try {
           // Clean up newlines and other whitespace before parsing
           const cleanedString = cards.replace(/\n/g, '').replace(/\s+/g, ' ').trim();
           return JSON.parse(cleanedString);
         } catch (e) {
           console.error("Error parsing cards:", e);
           return [];
         }
       }
       return cards;
     }
   }
   ```

2. **Fix the Deck Generation in Socket Service**:
   - Ensure that `generateRandomDeck` properly returns an array of card objects, not a string.
   - Add more validation and error handling when generating decks.

3. **MongoDB Command to Fix Existing Data**:
   - If needed, create a script to clean up existing data in MongoDB.

### 2. Standardize Game Logic Using Single Player Implementation

1. **Remove the Energy-Based Card Game**:
   - Remove or deprecate `createCardTemplate`, `getStarterDeck`, `getRandomCards` functions.
   - Standardize on the VeeFriends card game with skill/stamina/aura attributes.

2. **Update Multiplayer to Use Single Player Game Logic**:
   - Update the socket service to handle the same game phases as the single player game.
   - Use the existing single player UI components for multiplayer mode.
   - Share game logic between single and multiplayer modes.

3. **Update Deck Building for Multiplayer**:
   - Allow players to select from existing decks or generate random decks using the same rules as single player.
   - Reuse the deck building UI from single player mode.

### 3. Implementation Phases

1. **Phase 1**: Fix the MongoDB deck validation issue.
2. **Phase 2**: Update card game logic in the multiplayer service.
3. **Phase 3**: Update multiplayer UI to reuse single player components.
4. **Phase 4**: Test and validate the changes.

### 4. Potential MongoDB Cleanup Command

If necessary, run this command to clean up MongoDB data:

```javascript
db.veefriendsGames.find().forEach(function(game) {
  if (game.players) {
    game.players.forEach(function(player, index) {
      if (player.deck && typeof player.deck === 'string') {
        try {
          // Clean up and parse the deck
          const cleanedDeck = player.deck.replace(/\n/g, '').replace(/\s+/g, ' ').trim();
          game.players[index].deck = JSON.parse(cleanedDeck);
        } catch (e) {
          console.error("Error parsing deck for game " + game._id + ": " + e);
          game.players[index].deck = []; // Reset to empty array if parsing fails
        }
      }
    });
    db.veefriendsGames.save(game);
  }
});
``` 